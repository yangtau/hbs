package org.yangtau.hbs.hbase.coprocessor;

import com.google.protobuf.RpcCallback;
import com.google.protobuf.RpcController;
import com.google.protobuf.Service;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.CoprocessorEnvironment;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.ServiceCaller;
import org.apache.hadoop.hbase.coprocessor.CoprocessorException;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
import org.apache.hadoop.hbase.regionserver.Region;
import org.apache.hadoop.hbase.util.Bytes;
import org.yangtau.hbs.hbase.autogenerated.PutProtos;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

public class PutEndpoint extends PutProtos.PutService implements RegionCoprocessor {
    private RegionCoprocessorEnvironment env;

    // run Put request on the coprocessor
    public static CompletableFuture<PutProtos.PutResponse> runAsync(
            final Configuration conf, String table, PutProtos.PutRequest request) {
        ServiceCaller<Stub, PutProtos.PutResponse> put =
                (stub, controller, callback) -> stub.put(controller, request, callback);
        return ConnectionFactory.createAsyncConnection(conf)
                .thenApplyAsync(con -> con.getTable(TableName.valueOf(table)))
                .thenComposeAsync(t ->
                        t.coprocessorService(PutProtos.PutService::newStub, put, request.getRow().toByteArray())
                );
    }

    public static PutProtos.PutResponse run(final Configuration conf, String table, PutProtos.PutRequest request)
            throws ExecutionException, InterruptedException {
        return runAsync(conf, table, request).get();
    }

    static public Map<byte[], Long> run(final Configuration conf, String row) throws Throwable {
        return null;
    }

    @Override
    public void start(CoprocessorEnvironment env) throws IOException {
        if (env instanceof RegionCoprocessorEnvironment) this.env = (RegionCoprocessorEnvironment) env;
        else throw new CoprocessorException("Must be loaded on a table region!");
    }

    @Override
    public void stop(CoprocessorEnvironment env) {
        // do noting
    }

    @Override
    public Iterable<Service> getServices() {
        return Collections.singleton(this);
    }

    @Override
    public void put(RpcController controller, PutProtos.PutRequest request, RpcCallback<PutProtos.PutResponse> done) {
        try {
            Region.RowLock lock = env.getRegion().getRowLock(request.getRow().toByteArray(), false);
            lock.release();
        } catch (IOException e) {
        }
    }
}
