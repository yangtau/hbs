package org.yangtau.hbs.mvto.hbase.coprocessor;

import org.yangtau.hbs.mvto.hbase.autogenerated.PutProtos;

import com.google.protobuf.RpcCallback;
import com.google.protobuf.RpcController;
import com.google.protobuf.Service;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.CoprocessorEnvironment;
import org.apache.hadoop.hbase.coprocessor.CoprocessorException;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
import org.apache.hadoop.hbase.regionserver.Region;
import org.apache.hadoop.hbase.util.Bytes;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;

public class PutEndpoint extends PutProtos.PutService implements RegionCoprocessor {
    private RegionCoprocessorEnvironment env;

    @Override
    public void start(CoprocessorEnvironment env) throws IOException {
        if (env instanceof RegionCoprocessorEnvironment) {
            this.env = (RegionCoprocessorEnvironment) env;
        } else {
            throw new CoprocessorException("Must be loaded on a table region!");
        }
    }

    @Override
    public void stop(CoprocessorEnvironment env) {
        // do noting
    }

    @Override
    public Iterable<Service> getServices() {
        return Collections.singleton(this);
    }

    static public Map<byte[], Long> run(final Configuration conf, String row) throws Throwable {
        return null;
    }

    @Override
    public void put(RpcController controller, PutProtos.PutRequest request, RpcCallback<PutProtos.PutResponse> done) {
        try {
            Region.RowLock lock = env.getRegion().getRowLock(Bytes.toBytes(request.getRow()), false);
            lock.release();
        } catch (IOException e) {
            done.run(null);
        }
    }
}
